ggplot(data = mpg, aes(x = hwy, y = displ, color= displ, size = displ)) +
geom_point()
ggplot(data = mpg, aes(x = hwy, y = displ, size = displ)) +
geom_point()
#3. Zmapuj zmienną ciągłą na estetykę color, size i shape. Na czym polega różnica w zachowaniu tych estetyk w przypadku zmiennych kategorialnych i ciągłych?
ggplot(data = mpg, aes(x = hwy, y = displ, color = displ)) +
geom_point()
#5. Do czego służy estetyka "stroke"? Z jakimi kształtami można jej użyć? (Wskazówka: skorzystaj z polecenia ?geom_point).
ggplot(data = mpg, aes(x = hwy, y = displ, stroke = displ)) +
geom_point9)
#5. Do czego służy estetyka "stroke"? Z jakimi kształtami można jej użyć? (Wskazówka: skorzystaj z polecenia ?geom_point).
ggplot(data = mpg, aes(x = hwy, y = displ, stroke = displ)) +
geom_point())
#5. Do czego służy estetyka "stroke"? Z jakimi kształtami można jej użyć? (Wskazówka: skorzystaj z polecenia ?geom_point).
ggplot(data = mpg, aes(x = hwy, y = displ, stroke = displ)) +
geom_point()
#5. Do czego służy estetyka "stroke"? Z jakimi kształtami można jej użyć? (Wskazówka: skorzystaj z polecenia ?geom_point).
ggplot(data = mpg, aes(x = hwy, y = displ)) +
geom_point(size = 3)
#5. Do czego służy estetyka "stroke"? Z jakimi kształtami można jej użyć? (Wskazówka: skorzystaj z polecenia ?geom_point).
ggplot(data = mpg, aes(x = hwy, y = displ)) +
geom_point(size = 3, stroke = 4)
#5. Do czego służy estetyka "stroke"? Z jakimi kształtami można jej użyć? (Wskazówka: skorzystaj z polecenia ?geom_point).
ggplot(data = mpg, aes(x = hwy, y = displ)) +
geom_point(size = 3, stroke = 4, pch = 21)
#5. Do czego służy estetyka "stroke"? Z jakimi kształtami można jej użyć? (Wskazówka: skorzystaj z polecenia ?geom_point).
ggplot(data = mpg, aes(x = hwy, y = displ)) +
geom_point(size = 2, stroke = 7, pch = 21)
#5. Do czego służy estetyka "stroke"? Z jakimi kształtami można jej użyć? (Wskazówka: skorzystaj z polecenia ?geom_point).
ggplot(data = mpg, aes(x = hwy, y = displ)) +
geom_point(size = 10, stroke = 2, pch = 21)
#5. Do czego służy estetyka "stroke"? Z jakimi kształtami można jej użyć? (Wskazówka: skorzystaj z polecenia ?geom_point).
ggplot(data = mpg, aes(x = hwy, y = displ)) +
geom_point(size = 10, stroke = 2, shape = 0)
#5. Do czego służy estetyka "stroke"? Z jakimi kształtami można jej użyć? (Wskazówka: skorzystaj z polecenia ?geom_point).
ggplot(data = mpg, aes(x = hwy, y = displ)) +
geom_point(size = 6, stroke = 2, shape = 0)
#5. Do czego służy estetyka "stroke"? Z jakimi kształtami można jej użyć? (Wskazówka: skorzystaj z polecenia ?geom_point).
ggplot(data = mpg, aes(x = hwy, y = displ)) +
geom_point(size = 6, stroke = 3, shape = 0)
#6. Co się stani, jeśli zmapujesz estetykę na coś innego niż nazwa zmiennje, jak na przykład aes(color = displ <5)?
ggplot(data = mpg, aes(x = hwy, y = displ, color = displ < 5)) +
geom_point()
library(tidyverse)
#1. Co się stanie, jeśli podzielisz wykres na panele na podstawie zmiennej ciągłej?
ggplot(data = mpg, aes(x = hwy, y = displ)) +
geom_point() +
facet_wrap(~displ)
#1. Co się stanie, jeśli podzielisz wykres na panele na podstawie zmiennej ciągłej?
ggplot(data = mpg, aes(x = class, y = hwy)) +
geom_point() +
facet_wrap(~displ)
#1. Co się stanie, jeśli podzielisz wykres na panele na podstawie zmiennej ciągłej?
ggplot(data = mpg, aes(x = class, y = displ)) +
geom_point() +
facet_wrap(~hwy)
#1. Co się stanie, jeśli podzielisz wykres na panele na podstawie zmiennej ciągłej?
ggplot(data = mpg, aes(x = class, y = hwy)) +
geom_point() +
facet_wrap(~displ)
#2. Co oznaczają puste komórki na wykresie utworzonym przy użyciu instrukcji <facet_grid(drv ~ cyl)>? Jaka jest ich zależność względem tego wykresu?
ggplot(data = mpg, aes(x = drv, y = cyl)) +
geom_point()
#2. Co oznaczają puste komórki na wykresie utworzonym przy użyciu instrukcji <facet_grid(drv ~ cyl)>? Jaka jest ich zależność względem tego wykresu?
ggplot(data = mpg, aes(x = drv, y = cyl)) +
geom_point() +
facet_grid(drv ~ cyl)
#2. Co oznaczają puste komórki na wykresie utworzonym przy użyciu instrukcji <facet_grid(drv ~ cyl)>? Jaka jest ich zależność względem tego wykresu?
ggplot(data = mpg, aes(x = drv, y = cyl)) +
geom_point() +
facet_wrap(drv ~ cyl)
#2. Co oznaczają puste komórki na wykresie utworzonym przy użyciu instrukcji <facet_grid(drv ~ cyl)>? Jaka jest ich zależność względem tego wykresu?
ggplot(data = mpg, aes(x = drv, y = cyl)) +
geom_point() +
facet_grid(drv ~ cyl)
#3. Jakie wykresy powstaną po uruchomieniu tego kodu? Do czego służy znak <.>?
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point() +
facet_grid(drv ~ .)
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point() +
facet_grid(. ~ cyl)
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point() +
facet_wrap(~ cyl)
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point() +
facet_wrap(~ cyl, nrow = 1)
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point() +
facet_grid(. ~ cyl)
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point() +
facet_wrap(~ cyl, nrow = 1)
#3. Jakie wykresy powstaną po uruchomieniu tego kodu? Do czego służy znak <.>?
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point() +
facet_grid(drv ~ .)
#4. Przyjrzyj się wykresowi w pierwszym panelu utworzonym za pomocą poniższego kodu. Jakie korzyści płyną z użycia paneli w porównaniu z użyciem estetyki koloru? Jakie są wady tego podejścia? Jak się to zmieni, jeśli skorzystasz z wielkiego zbioru danych?
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point() +
facet_wrap(~ class, nrow = 2)
ggplot(data = mpg, aes(x = displ, y = hwy, color = class)) +
geom_point()
#4. Przyjrzyj się wykresowi w pierwszym panelu utworzonym za pomocą poniższego kodu. Jakie korzyści płyną z użycia paneli w porównaniu z użyciem estetyki koloru? Jakie są wady tego podejścia? Jak się to zmieni, jeśli skorzystasz z wielkiego zbioru danych?
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point() +
facet_wrap(~ class, nrow = 2)
#6. Podczas korzystania z funkcji <facet_grid()> w kolumnach zwykle należy umieszczać zmienne z bardziej unikatowymi poziomami. Dlaczego?
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point() +
facet_grid(class ~ cyl)
#6. Podczas korzystania z funkcji <facet_grid()> w kolumnach zwykle należy umieszczać zmienne z bardziej unikatowymi poziomami. Dlaczego?
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point() +
facet_grid(cyl ~ class)
#2. Wyobraź sobie wynik działania poniższego kodu. Następnie uruchom go w R i zweryfikuj swoje przewidywania:
ggplot(data = mpg, aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth(se = false)
#2. Wyobraź sobie wynik działania poniższego kodu. Następnie uruchom go w R i zweryfikuj swoje przewidywania:
ggplot(data = mpg, aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth(se = FALSE)
#3. Do czego służy kod <show.legend - FALSE>? Co się stanie, gdy go usuniesz? Jak myślisz, dlaczego użyłem go wcześniej w tym rozdziale?
ggplot(data = mpg, aes(x = displ, y = hwy, color = drv)) +
geom_smooth(show.legend = FALSE)
#3. Do czego służy kod <show.legend - FALSE>? Co się stanie, gdy go usuniesz? Jak myślisz, dlaczego użyłem go wcześniej w tym rozdziale?
ggplot(data = mpg, aes(x = displ, y = hwy, color = drv)) +
geom_smooth(show.legend = TRUE)
#3. Do czego służy kod <show.legend - FALSE>? Co się stanie, gdy go usuniesz? Jak myślisz, dlaczego użyłem go wcześniej w tym rozdziale?
ggplot(data = mpg, aes(x = displ, y = hwy, color = drv)) +
geom_smooth(show.legend = FALSE)
#1. Uruchom polecenie ggplot(data = mpg). Co widzisz?
library(tidyverse)
ggplot(data = mpg)
#AD1. funkcja ggplot z pakiety ggplot2 generuje układ współrzędnych, na którym można dodawać następnie warstwy.
#2. Ile wierszy znajduje się w zbiorze danych mtcars? Ile jest kolumn
dim(mtcars)
#AD2. W zbiorze danych mtcars znajdują się 32 wiersze i 11 kolumn.
#3. Co opisuje zmienna drv? Dowiesz się tego z treści pomocy, która zostanie wyświetlona po uruchomieniu polecenia ?mpg.
?mpg
typeof(mpg$drv)
#AD3. Zmienna drv opisuje rodzaj napędu danego modelu samochodu. Przyjmuje 3 wartości zmiennych typu character: f, r i 4, gdzie:
#f - oznacza napęd przedniej osi
#r - oznacza napęd tylnej osi
#4 - oznacza napęd na obie osi.
#4. Wykonaj wykres punktowy zależności między zmiennymi hwy i cyl.
ggplot(data = mpg, aes(x = cyl, y = hwy)) +
geom_point(position = "jitter")
#5. Co zobaczysz na wykresie punktowym zależności między zmiennymi class i drv? Dlaczego ten wykres jest bezużyteczny?
ggplot(data = mpg, aes(x = class, y = drv)) +
geom_point()
#AD5. Punkty na wykresie reprezentują modele samochodów danej klasy o konkretnym napędzie. Wykres jest nieczytelny, ponieważ punkty nachodzą na siebie. Dodanie parametru <position = "jitter"> funkcji <geom_point()> doda losowy szum, który uwydatni skupiska, lecz wykres punktowy nie jest najlepszym wyborem.
#1. W którym miejscu tego kodu znajduje się błąd? Dlaczego punkty nie są niebieskie?
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = "blue"))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = drv))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = "blue")
#AD1. Parametr "color" dodany w funkcji <aes()> wskazuje, by punkty zostały pokolorowane według przekazanej wartości. Jeśli jest to zmienna, to punkty pokolorowane będą według wartości jaka ta zmienna przyjmuje. Jeśli chcemy, by punkty były koloru niebieskiego (bądź jakiegokolwiek innego), parametr "blue" należy przekazać poza funkcją <aes()>.
#2. Które zmienne ze zbioru mpg są kategorialne? Które zmienne są ciągłe? (Wskazówka: wpisz ?mpg, by przeczytać dokumentację tego zbioru danych). Jak sprawdzić te informacje, uruchamiając polecenie mpg?
lapply(mpg, typeof)
#AD2. Typy zmiennych w zbiorze to:
#character: manufacturer, model, trans, drv, fl, class
#integer: year, cyl, cty, hwy
#double: displ
#3. Zmapuj zmienną ciągłą na estetykę color, size i shape. Na czym polega różnica w zachowaniu tych estetyk w przypadku zmiennych kategorialnych i ciągłych?
ggplot(data = mpg, aes(x = hwy, y = displ, color = displ)) +
geom_point()
ggplot(data = mpg, aes(x = hwy, y = displ, size = displ)) +
geom_point()
ggplot(data = mpg, aes(x = hwy, y = displ, shape = displ)) +
geom_point()
#5. Czy te dwa wykresy są inne? Dlaczego?
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth()
ggplot() +
geom_point(data = mpg, aes(x  = displ, y = hwy)) +
geom_smooth(data = mpg, aes(x = displ, y = hwy))
#6. Odtwórz kod R potrzebny do wygenerowania następujących wykresów.
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth(se = FALSE)
ggplot(data = mpg, aes(x = displ, y = hwy, group = drv)) +
geom_point() +
geom_smooth(se = FALSE)
ggplot(data = mpg, aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth(se = FALSE)
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point(color = drv) +
geom_smooth(se = FALSE)
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point(data = mpg, color = drv) +
geom_smooth(se = FALSE)
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point(aes(color = drv)) +
geom_smooth(se = FALSE)
ggplot(data = mpg, aes(x = displ, y = hwy, linetype = drv)) +
geom_point(aes(color = drv)) +
geom_smooth(se = FALSE)
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point(aes(color = drv, pch = 21, stroke = 2)) +
geom_smooth(se = FALSE)
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point(aes(color = drv, shape = 0, stroke = 2)) +
geom_smooth(se = FALSE)
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point(aes(color = drv), shape = 0, stroke = 2)) +
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point(aes(color = drv), shape = 0, stroke = 2) +
geom_smooth(se = FALSE)
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point(aes(color = drv), pch = 21, stroke = 2) +
geom_smooth(se = FALSE)
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point(aes(color = drv), pch = 21, fill = "black", color = "white") +
geom_smooth(se = FALSE)
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point(aes(color = drv), pch = 21, color = "white") +
geom_smooth(se = FALSE)
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point(aes(color = drv), pch = 21, color = "white", stroke = 3) +
geom_smooth(se = FALSE)
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point(aes(color = drv), pch = 21, color = "white", stroke = 2, fill = "black") +
geom_smooth(se = FALSE)
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point(aes(fill = drv), pch = 21, color = "white", stroke = 2) +
geom_smooth(se = FALSE)
#1. Która domyślna funkcja geometryczna jest związana z funkcją <stat_summary()>? Jak można przepisać wcześniejszy wykres, aby skorzystać z funkcji geometrycznej zamiast z przekształcenia statystycznego?
ggplot(data = diamonds, aes(x = cut)) +
stat_summary()
library(tidyverse)
#1. Która domyślna funkcja geometryczna jest związana z funkcją <stat_summary()>? Jak można przepisać wcześniejszy wykres, aby skorzystać z funkcji geometrycznej zamiast z przekształcenia statystycznego?
ggplot(data = diamonds, aes(x = cut)) +
stat_summary()
#1. Która domyślna funkcja geometryczna jest związana z funkcją <stat_summary()>? Jak można przepisać wcześniejszy wykres, aby skorzystać z funkcji geometrycznej zamiast z przekształcenia statystycznego?
ggplot(data = diamonds, aes(x = cut, y = depth)) +
stat_summary()
?stat_summary()
?stat_count()
?stat_summary
ggplot(data = diamonds, aes(x = cut, y = depth)) +
stat_summary(fun.ymin = min,
fun.ymax = max,
fun.y = median)
ggplot(data = diamonds, aes(x = cut, y = depth)) +
geom_pointrange()
ggplot(data = diamonds, aes(x = cut, y = depth)) +
geom_pointrange(fun.ymin = min,
fun.ymax = max,
fun.y = median,
stat = "summary"
)
ggplot(data = diamonds, aes(x = cut, y = depth)) +
stat_summary(fun.ymin = min,
fun.ymax = max,
fun.y = median)
#2. Do czego służyc funkcja <geom_col()>? Czym różni się od funkcji <geom_bar()>?
ggplot(data = diamonds, aes(x = cut, y = depth)) +
geom_bar()
#2. Do czego służyc funkcja <geom_col()>? Czym różni się od funkcji <geom_bar()>?
ggplot(data = diamonds, aes(x = cut, y = depth)) +
geom_col()
#1. Uruchom polecenie ggplot(data = mpg). Co widzisz?
library(tidyverse)
ggplot(data = mpg)
#AD1. funkcja ggplot z pakiety ggplot2 generuje układ współrzędnych, na którym można dodawać następnie warstwy.
#2. Ile wierszy znajduje się w zbiorze danych mtcars? Ile jest kolumn
dim(mtcars)
#AD2. W zbiorze danych mtcars znajdują się 32 wiersze i 11 kolumn.
#3. Co opisuje zmienna drv? Dowiesz się tego z treści pomocy, która zostanie wyświetlona po uruchomieniu polecenia ?mpg.
?mpg
typeof(mpg$drv)
#AD3. Zmienna drv opisuje rodzaj napędu danego modelu samochodu. Przyjmuje 3 wartości zmiennych typu character: f, r i 4, gdzie:
#f - oznacza napęd przedniej osi
#r - oznacza napęd tylnej osi
#4 - oznacza napęd na obie osi.
#4. Wykonaj wykres punktowy zależności między zmiennymi hwy i cyl.
ggplot(data = mpg, aes(x = cyl, y = hwy)) +
geom_point(position = "jitter")
#5. Co zobaczysz na wykresie punktowym zależności między zmiennymi class i drv? Dlaczego ten wykres jest bezużyteczny?
ggplot(data = mpg, aes(x = class, y = drv)) +
geom_point()
#AD5. Punkty na wykresie reprezentują modele samochodów danej klasy o konkretnym napędzie. Wykres jest nieczytelny, ponieważ punkty nachodzą na siebie. Dodanie parametru <position = "jitter"> funkcji <geom_point()> doda losowy szum, który uwydatni skupiska, lecz wykres punktowy nie jest najlepszym wyborem.
#1. W którym miejscu tego kodu znajduje się błąd? Dlaczego punkty nie są niebieskie?
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = "blue"))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = drv))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = "blue")
#AD1. Parametr "color" dodany w funkcji <aes()> wskazuje, by punkty zostały pokolorowane według przekazanej wartości. Jeśli jest to zmienna, to punkty pokolorowane będą według wartości jaka ta zmienna przyjmuje. Jeśli chcemy, by punkty były koloru niebieskiego (bądź jakiegokolwiek innego), parametr "blue" należy przekazać poza funkcją <aes()>.
#2. Które zmienne ze zbioru mpg są kategorialne? Które zmienne są ciągłe? (Wskazówka: wpisz ?mpg, by przeczytać dokumentację tego zbioru danych). Jak sprawdzić te informacje, uruchamiając polecenie mpg?
lapply(mpg, typeof)
#AD2. Typy zmiennych w zbiorze to:
#character: manufacturer, model, trans, drv, fl, class
#integer: year, cyl, cty, hwy
#double: displ
#3. Zmapuj zmienną ciągłą na estetykę color, size i shape. Na czym polega różnica w zachowaniu tych estetyk w przypadku zmiennych kategorialnych i ciągłych?
ggplot(data = mpg, aes(x = hwy, y = displ, color = displ)) +
geom_point()
ggplot(data = mpg, aes(x = hwy, y = displ, size = displ)) +
geom_point()
ggplot(data = mpg, aes(x = hwy, y = displ, shape = displ)) +
geom_point()
#3. Większość funkcji geometrycznych i przekształceń statystycznych tworzy pare, które niemal zawsze są używane wspólnie. Przeczytaj dokumentację i wykonaj listę tych par. Co mają ze sobą wspólnego?
?stat_bin
#3. Większość funkcji geometrycznych i przekształceń statystycznych tworzy pare, które niemal zawsze są używane wspólnie. Przeczytaj dokumentację i wykonaj listę tych par. Co mają ze sobą wspólnego?
?ggplot2
#4. Jakie zmienne oblicza funkcja <stat_smooth()>? Jakie parametry sterują jej zachowaniem?
?stat_smooth
#5. Na naszym wykresie słupkowym proporcji musieliśmy skorzystać z zapisu "group = 1". Dlaczego? Innymi słowy, na czym polega problem z poniższymi wykresami?
ggplot(data = diamonds, aes(x = cut, y = ..prop..)) +
geom_bar()
ggplot(data = diamonds, aes(x = cut, y = ..prop.., fill = color)) +
geom_bar()
ggplot(data = diamonds, aes(x = cut, y = ..prop.., fill = color, group = 1)) +
geom_bar()
ggplot(data = diamonds, aes(x = cut, y = ..prop.., group = 1)) +
geom_bar()
ggplot(data = diamonds, aes(x = cut, fill = clarity)) + geom_bar(psition = "identity", alpha = .2)
ggplot(data = diamonds, aes(x = cut, fill = clarity)) + geom_bar(position = "identity", alpha = .2)
ggplot(data = diamonds, aes(x = cut, fill = clarity)) + geom_bar(position = "identity")
ggplot(data = diamonds, aes(x = cut, fill = clarity)) + geom_bar(position = "identity", alpha = .2)
ggplot(data = diamonds, aes(x = cut, fill = clarity)) + geom_bar(position = "fill")
#1. Na czym polega problem z tym wykresem? Jak można go poprawić?
ggplot(data = mpg, aes(x = cty, y = hwy)) +
geom_point()
#1. Na czym polega problem z tym wykresem? Jak można go poprawić?
ggplot(data = mpg, aes(x = cty, y = hwy)) +
geom_point()
#1. Na czym polega problem z tym wykresem? Jak można go poprawić?
ggplot(data = mpg, aes(x = cty, y = hwy)) +
geom_point(position = "jitter")
ggplot(data = mpg, aes(x = cty, y = hwy)) +
geom_point(position = "jitter")
#2. Jakie parametry funkcji <geom_jitter()> sterują poziomem fluktuacji?
?geom_jitter
#2. Jakie parametry funkcji <geom_jitter()> sterują poziomem fluktuacji?
ggplot(data = mpg, aes( x = cty, y = hwy)) +
geom_jitter()
ggplot(data = mpg, aes( x = cty, y = hwy)) +
geom_jitter(width = .7, height = .7)
ggplot(data = mpg, aes( x = cty, y = hwy)) +
geom_jitter(width = .1, height = .1)
ggplot(data = mpg, aes( x = cty, y = hwy)) +
geom_jitter(width = .9, height = .1)
ggplot(data = mpg, aes( x = cty, y = hwy)) +
geom_jitter(width = .1, height = .9)
ggplot(data = mpg, aes( x = cty, y = hwy)) +
geom_jitter(width = 1, height = 1)
ggplot(data = mpg, aes( x = cty, y = hwy)) +
geom_count()
#4. Jakie jest domyślne dopasowanie położenia dla <geom_boxplot()>? Utwórz odpowiednią wizualizację zestawu danych "mpg".
?geom_boxplot()
ggplot(data = mpg, aes(x = class, y = displ)) +
geom_boxplot()
?mpg
ggplot(data = mpg, aes(x = class, y = displ, color = drv)) +
geom_boxplot()
#1. Przekształć skumulowany wykres słupkowy w wykres kołowy za pomocą funkcji <coord_polar()>.
ggplot(data = diamonds, aes(x = cut, fill = color)) +
geom_bar()
#1. Przekształć skumulowany wykres słupkowy w wykres kołowy za pomocą funkcji <coord_polar()>.
ggplot(data = diamonds, aes(x = cut, fill = color)) +
geom_bar() +
coord_polar()
#1. Przekształć skumulowany wykres słupkowy w wykres kołowy za pomocą funkcji <coord_polar()>.
ggplot(data = diamonds, aes(x = cut, fill = color)) +
geom_col(position = "fill") +
coord_polar()
#1. Przekształć skumulowany wykres słupkowy w wykres kołowy za pomocą funkcji <coord_polar()>.
ggplot(data = diamonds, aes(x = cut, fill = color)) +
geom_bar(position = "fill") +
coord_polar()
#1. Przekształć skumulowany wykres słupkowy w wykres kołowy za pomocą funkcji <coord_polar()>.
ggplot(data = diamonds, aes(x = cut, fill = color, group = 1)) +
geom_bar(position = "fill") +
coord_polar()
#1. Przekształć skumulowany wykres słupkowy w wykres kołowy za pomocą funkcji <coord_polar()>.
ggplot(data = diamonds, aes(x = cut, fill = color)) +
geom_bar() +
coord_flip()
#1. Przekształć skumulowany wykres słupkowy w wykres kołowy za pomocą funkcji <coord_polar()>.
ggplot(data = diamonds, aes(x = cut, fill = color)) +
geom_bar() +
coord_flip() +
coord_polar()
#1. Przekształć skumulowany wykres słupkowy w wykres kołowy za pomocą funkcji <coord_polar()>.
ggplot(data = diamonds, aes(x = cut, fill = color)) +
geom_bar() +
coord_flip()
#1. Przekształć skumulowany wykres słupkowy w wykres kołowy za pomocą funkcji <coord_polar()>.
ggplot(data = diamonds, aes(x = cut, fill = color)) +
geom_bar() +
coord_flip() +
coord_polar
#1. Przekształć skumulowany wykres słupkowy w wykres kołowy za pomocą funkcji <coord_polar()>.
ggplot(data = diamonds, aes(x = cut, fill = color)) +
geom_bar() +
coord_flip() +
coord_polar()
#1. Przekształć skumulowany wykres słupkowy w wykres kołowy za pomocą funkcji <coord_polar()>.
ggplot(data = diamonds, aes(x = cut, fill = color)) +
geom_bar(width = 1) +
coord_flip() +
coord_polar()
ggplot(mpg, aes(factor(1), fill = factor(cyl))) +
geom_bar(width = 1) +
coord_polar(theta = 'y')
#1. Przekształć skumulowany wykres słupkowy w wykres kołowy za pomocą funkcji <coord_polar()>.
ggplot(data = diamonds, aes(x = cut, fill = color)) +
geom_bar(width = 1) +
coord_flip() +
coord_polar(theta = "y")
#1. Przekształć skumulowany wykres słupkowy w wykres kołowy za pomocą funkcji <coord_polar()>.
ggplot(data = diamonds, aes(x = "", y = cut, fill = color)) +
geom_bar(width = 1) +
coord_flip() +
coord_polar()
#1. Przekształć skumulowany wykres słupkowy w wykres kołowy za pomocą funkcji <coord_polar()>.
ggplot(data = diamonds, aes(x = "", y = cut, fill = color)) +
geom_bar(width = 1, stat = "identity") +
coord_flip() +
coord_polar()
#1. Przekształć skumulowany wykres słupkowy w wykres kołowy za pomocą funkcji <coord_polar()>.
ggplot(data = diamonds, aes(x = cut, fill = clarity)) +
geom_bar(position = "fill")
#1. Przekształć skumulowany wykres słupkowy w wykres kołowy za pomocą funkcji <coord_polar()>.
ggplot(data = diamonds, aes(x = cut, fill = clarity)) +
geom_bar(position = "fill") +
coord_polar()
ggplot(data = diamonds, aes(x = cut, fill = clarity)) +
geom_bar(position = "fill")
ggplot(data = diamonds, aes(x = cut, fill = clarity)) +
geom_bar()
#1. Przekształć skumulowany wykres słupkowy w wykres kołowy za pomocą funkcji <coord_polar()>.
ggplot(data = diamonds, aes(x = cut, fill = clarity)) +
geom_bar() +
coord_polar()
#2. Do czego służy funkcja <labs()>? Przeczytaj dokumentację.
?labs()
#3. Na czym polega różnica między <coord_quickmap()>, a <coord_map()>?
new_zealand <- map_data("nz")
install.packages("maps")
library(maps)
#3. Na czym polega różnica między <coord_quickmap()>, a <coord_map()>?
new_zealand <- map_data("nz")
ggplot(new_zealand, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "black")
ggplot(new_zealand, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "black") +
coord_map()
ggplot(new_zealand, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "black") +
coord_quickmap()
ggplot(new_zealand, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "black") +
coord_map()
install.packages("mapproj")
ggplot(new_zealand, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "black") +
coord_map()
ggplot(new_zealand, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "black") +
coord_quickmap()
ggplot(new_zealand, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "black") +
coord_map()
#4. Patrząc na poniższy wykres, czego możesz się dowiedzieć o zależności między miastem (cty) a wydajnością zużycia paliwa na autostradzie (hwy)? Dlaczego ważne jest wywołanie <coord_fixed()>? Do czego służy funkcja <geom_abline()>?
ggplot(data = mpg, aes(x = cty, y = hwy)) +
geom_point()
#4. Patrząc na poniższy wykres, czego możesz się dowiedzieć o zależności między miastem (cty) a wydajnością zużycia paliwa na autostradzie (hwy)? Dlaczego ważne jest wywołanie <coord_fixed()>? Do czego służy funkcja <geom_abline()>?
ggplot(data = mpg, aes(x = cty, y = hwy)) +
geom_point() +
geom_abline()
#4. Patrząc na poniższy wykres, czego możesz się dowiedzieć o zależności między miastem (cty) a wydajnością zużycia paliwa na autostradzie (hwy)? Dlaczego ważne jest wywołanie <coord_fixed()>? Do czego służy funkcja <geom_abline()>?
ggplot(data = mpg, aes(x = cty, y = hwy)) +
geom_point() +
geom_abline() +
coord_fixed()
ggplot(data = mpg, aes(x = cty, y = hwy)) +
geom_point() +
geom_abline()
#4. Patrząc na poniższy wykres, czego możesz się dowiedzieć o zależności między miastem (cty) a wydajnością zużycia paliwa na autostradzie (hwy)? Dlaczego ważne jest wywołanie <coord_fixed()>? Do czego służy funkcja <geom_abline()>?
ggplot(data = mpg, aes(x = cty, y = hwy)) +
geom_point() +
geom_abline() +
coord_fixed()
#1. Przekształć skumulowany wykres słupkowy w wykres kołowy za pomocą funkcji <coord_polar()>.
ggplot(data = diamonds, aes(x = cut, fill = clarity)) +
geom_bar() +
coord_polar()
ggplot(data = diamonds, aes(x = cut, fill = clarity)) +
geom_bar()
ggplot(data = diamonds, aes(x = cut, fill = clarity)) +
geom_bar() +
coord_polar()
my_variable <- 10
my_variable
#2. Popraw wszystkie poniższe polecenia R, aby można je było poprawnie uruchomić:
library(tidyverse)
ggplot(data = mpg, aes(x = displ, y  = hwy)) +
geom_point()
gilter(mpg, cyl = 8)
filter(mpg, cyl = 8)
filter(diamonds, carat > 3)
